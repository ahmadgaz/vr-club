import Head from "next/head";
import React, { lazy, Suspense, useCallback, useEffect, useState } from "react";
import { useAppContext } from "~/context/context";

const Bg = lazy(() => import("~/components/bg"));
const Hero = lazy(() => import("~/components/home/hero/hero"));
const AboutUs = lazy(() => import("~/components/about/aboutUs/aboutUs"));
const Equipment = lazy(() => import("~/components/about/equipment/equipment"));
const MeetOurTeam = lazy(
  () => import("~/components/about/meetOurTeam/meetOurTeam")
);
const Projects = lazy(() => import("~/components/projects/projects/projects"));
const Events = lazy(() => import("~/components/events/events/events"));
const Resources = lazy(
  () => import("~/components/resources/resources/resources")
);
const Footer = lazy(() => import("~/components/footer"));

export default function Home() {
  const [isClient, setIsClient] = useState(false);

  useEffect(() => {
    setIsClient(true);
  }, []);

  const {
    scrollPosition,
    heroHeight,
    aboutUsHeight,
    equipmentHeight,
    meetOurTeamHeight,
    projectsHeight,
    eventsHeight,
    resourcesHeight,
    setScrollPosition,
    setHeroHeight,
    setAboutUsHeight,
    setEquipmentHeight,
    setMeetOurTeamHeight,
    setProjectsHeight,
    setEventsHeight,
    setResourcesHeight,
  } = useAppContext();

  const handleSetHeroHeight = useCallback(
    (node: HTMLDivElement) => {
      if (node) {
        setHeroHeight(node?.offsetHeight);
      }
    },
    [setHeroHeight]
  );
  const handleSetAboutUsHeight = useCallback(
    (node: HTMLDivElement) => {
      if (node) {
        setAboutUsHeight(node?.offsetHeight);
      }
    },
    [setAboutUsHeight]
  );
  const handleSetEquipmentHeight = useCallback(
    (node: HTMLDivElement) => {
      if (node) {
        setEquipmentHeight(node?.offsetHeight);
      }
    },
    [setEquipmentHeight]
  );
  const handleSetMeetOurTeamHeight = useCallback(
    (node: HTMLDivElement) => {
      if (node) {
        setMeetOurTeamHeight(node?.offsetHeight);
      }
    },
    [setMeetOurTeamHeight]
  );
  const handleSetProjectsHeight = useCallback(
    (node: HTMLDivElement) => {
      if (node) {
        setProjectsHeight(node?.offsetHeight);
      }
    },
    [setProjectsHeight]
  );
  const handleSetEventsHeight = useCallback(
    (node: HTMLDivElement) => {
      if (node) {
        setEventsHeight(node?.offsetHeight);
      }
    },
    [setEventsHeight]
  );
  const handleSetResourcesHeight = useCallback(
    (node: HTMLDivElement) => {
      if (node) {
        setResourcesHeight(node?.offsetHeight);
      }
    },
    [setResourcesHeight]
  );

  const listenToScroll = useCallback(() => {
    setScrollPosition(window.scrollY + window.innerHeight);
  }, [setScrollPosition]);

  useEffect(() => {
    window.addEventListener("scroll", listenToScroll);
    return () => window.removeEventListener("scroll", listenToScroll);
  }, [listenToScroll]);

  useEffect(() => {
    setScrollPosition(window.scrollY + window.innerHeight);
  }, [isClient, setScrollPosition]);

  return (
    <>
      <Head>
        <title>VR Club SJSU</title>
        <meta name="description" content="Generated by create-t3-app" />
      </Head>
      <main className="relative flex min-h-[100dvh] min-w-full flex-col">
        {isClient && (
          <Suspense>
            <Bg />
            {scrollPosition >= 0 &&
            scrollPosition - window.innerHeight < heroHeight ? (
              <div ref={handleSetHeroHeight}>
                <Hero />
              </div>
            ) : (
              <div style={{ height: `${heroHeight}px` }}></div>
            )}
            {scrollPosition > heroHeight &&
            scrollPosition - window.innerHeight < heroHeight + aboutUsHeight ? (
              <div ref={handleSetAboutUsHeight}>
                <AboutUs />
              </div>
            ) : (
              <div style={{ height: `${aboutUsHeight}px` }}></div>
            )}
            {scrollPosition > heroHeight + aboutUsHeight &&
            scrollPosition - window.innerHeight <
              heroHeight + aboutUsHeight + equipmentHeight ? (
              <div ref={handleSetEquipmentHeight}>
                <Equipment />
              </div>
            ) : (
              <div style={{ height: `${equipmentHeight}px` }}></div>
            )}
            {scrollPosition > heroHeight + aboutUsHeight + equipmentHeight &&
            scrollPosition - window.innerHeight <
              heroHeight +
                aboutUsHeight +
                equipmentHeight +
                meetOurTeamHeight ? (
              <div ref={handleSetMeetOurTeamHeight}>
                <MeetOurTeam />
              </div>
            ) : (
              <div style={{ height: `${meetOurTeamHeight}px` }}></div>
            )}
            {scrollPosition >
              heroHeight +
                aboutUsHeight +
                equipmentHeight +
                meetOurTeamHeight &&
            scrollPosition - window.innerHeight <
              heroHeight +
                aboutUsHeight +
                equipmentHeight +
                meetOurTeamHeight +
                projectsHeight ? (
              <div ref={handleSetProjectsHeight}>
                <Projects />
              </div>
            ) : (
              <div style={{ height: `${projectsHeight}px` }}></div>
            )}
            {scrollPosition >
              heroHeight +
                aboutUsHeight +
                equipmentHeight +
                meetOurTeamHeight +
                projectsHeight &&
            scrollPosition - window.innerHeight <
              heroHeight +
                aboutUsHeight +
                equipmentHeight +
                meetOurTeamHeight +
                projectsHeight +
                eventsHeight ? (
              <div ref={handleSetEventsHeight}>
                <Events />
              </div>
            ) : (
              <div style={{ height: `${eventsHeight}px` }}></div>
            )}
            {scrollPosition >
              heroHeight +
                aboutUsHeight +
                equipmentHeight +
                meetOurTeamHeight +
                projectsHeight +
                eventsHeight &&
            scrollPosition - window.innerHeight <
              heroHeight +
                aboutUsHeight +
                equipmentHeight +
                meetOurTeamHeight +
                projectsHeight +
                eventsHeight +
                resourcesHeight ? (
              <div ref={handleSetResourcesHeight}>
                <Resources />
              </div>
            ) : (
              <div style={{ height: `${resourcesHeight}px` }}></div>
            )}
            <Footer />
          </Suspense>
        )}
      </main>
    </>
  );
}
