import Head from "next/head";
import React, { lazy, Suspense, useCallback, useEffect, useState } from "react";

const Bg = lazy(() => import("~/components/bg"));
const Hero = lazy(() => import("~/components/home/hero/hero"));
const AboutUs = lazy(() => import("~/components/about/aboutUs/aboutUs"));
const Equipment = lazy(() => import("~/components/about/equipment/equipment"));
const MeetOurTeam = lazy(
  () => import("~/components/about/meetOurTeam/meetOurTeam")
);
const Projects = lazy(() => import("~/components/projects/projects/projects"));
const Events = lazy(() => import("~/components/events/events/events"));
const Footer = lazy(() => import("~/components/footer"));

export default function Home() {
  const [scrollPosition, setScrollPosition] = useState(0);
  const [heroHeight, setHeroHeight] = useState<number>(2000);
  const [aboutUsHeight, setAboutUsHeight] = useState<number>(2000);
  const [equipmentHeight, setEquipmentHeight] = useState<number>(2000);
  const [meetOurTeamHeight, setMeetOurTeamHeight] = useState<number>(2000);
  const [projectsHeight, setProjectsHeight] = useState<number>(2000);
  const [eventsHeight, setEventsHeight] = useState<number>(2000);

  const handleSetHeroHeight = useCallback((node: HTMLDivElement) => {
    if (node) {
      setHeroHeight(node?.offsetHeight);
    }
  }, []);
  const handleSetAboutUsHeight = useCallback((node: HTMLDivElement) => {
    if (node) {
      setAboutUsHeight(node?.offsetHeight);
    }
  }, []);
  const handleSetEquipmentHeight = useCallback((node: HTMLDivElement) => {
    if (node) {
      setEquipmentHeight(node?.offsetHeight);
    }
  }, []);
  const handleSetMeetOurTeamHeight = useCallback((node: HTMLDivElement) => {
    if (node) {
      setMeetOurTeamHeight(node?.offsetHeight);
    }
  }, []);
  const handleSetProjectsHeight = useCallback((node: HTMLDivElement) => {
    if (node) {
      setProjectsHeight(node?.offsetHeight);
    }
  }, []);
  const handleSetEventsHeight = useCallback((node: HTMLDivElement) => {
    if (node) {
      setEventsHeight(node?.offsetHeight);
    }
  }, []);

  const listenToScroll = useCallback(() => {
    setScrollPosition(window.scrollY + window.innerHeight);
  }, []);

  useEffect(() => {
    window.addEventListener("scroll", listenToScroll);
    return () => window.removeEventListener("scroll", listenToScroll);
  }, [listenToScroll]);

  // useEffect(() => {
  //   setTimeout(() => {
  //     setScrollPosition(window.scrollY + window.innerHeight);
  //   }, 100);
  // }, []);

  return (
    <>
      <Head>
        <title>VR Club SJSU</title>
        <meta name="description" content="Generated by create-t3-app" />
      </Head>
      <main className="relative flex min-h-[100dvh] min-w-full flex-col">
        <Suspense>
          <Bg />
          <div ref={handleSetHeroHeight}>
            <Hero />
          </div>
          {scrollPosition > heroHeight &&
          scrollPosition - window.innerHeight < heroHeight + aboutUsHeight ? (
            <div ref={handleSetAboutUsHeight}>
              <AboutUs />
            </div>
          ) : (
            <div style={{ height: `${aboutUsHeight}px` }}></div>
          )}
          {scrollPosition > heroHeight + aboutUsHeight &&
          scrollPosition - window.innerHeight <
            heroHeight + aboutUsHeight + equipmentHeight ? (
            <div ref={handleSetEquipmentHeight}>
              <Equipment />
            </div>
          ) : (
            <div style={{ height: `${equipmentHeight}px` }}></div>
          )}
          {scrollPosition > heroHeight + aboutUsHeight + equipmentHeight &&
          scrollPosition - window.innerHeight <
            heroHeight + aboutUsHeight + equipmentHeight + meetOurTeamHeight ? (
            <div ref={handleSetMeetOurTeamHeight}>
              <MeetOurTeam />
            </div>
          ) : (
            <div style={{ height: `${meetOurTeamHeight}px` }}></div>
          )}
          {scrollPosition >
            heroHeight + aboutUsHeight + equipmentHeight + meetOurTeamHeight &&
          scrollPosition - window.innerHeight <
            heroHeight +
              aboutUsHeight +
              equipmentHeight +
              meetOurTeamHeight +
              projectsHeight ? (
            <div ref={handleSetProjectsHeight}>
              <Projects />
            </div>
          ) : (
            <div style={{ height: `${projectsHeight}px` }}></div>
          )}
          {scrollPosition >
            heroHeight +
              aboutUsHeight +
              equipmentHeight +
              meetOurTeamHeight +
              projectsHeight &&
          scrollPosition - window.innerHeight <
            heroHeight +
              aboutUsHeight +
              equipmentHeight +
              meetOurTeamHeight +
              projectsHeight +
              eventsHeight ? (
            <div ref={handleSetEventsHeight}>
              <Events />
            </div>
          ) : (
            <div style={{ height: `${eventsHeight}px` }}></div>
          )}
          <Footer />
        </Suspense>
      </main>
    </>
  );
}
